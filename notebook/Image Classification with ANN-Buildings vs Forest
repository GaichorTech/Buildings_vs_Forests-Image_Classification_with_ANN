{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Image Classification with ANN-Buildings vs Forest","provenance":[],"collapsed_sections":[],"mount_file_id":"1J8sSTAjaZg1Kk1Fnqi6KHDNUO0pSUMg9","authorship_tag":"ABX9TyOSaJ/fvTA8lDHnyy+pimjo"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU","widgets":{"application/vnd.jupyter.widget-state+json":{"cbb076449c9c40da8c776d96c397ccaf":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_28fa2bfb61d743b1b402a6cd0c6acecc","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_56366e5bf5444d8a88f257e138117441","IPY_MODEL_a9fb7c15c16c433781052bae7cdd3aef","IPY_MODEL_0f23924f072e4b05952f94f095806552"]}},"28fa2bfb61d743b1b402a6cd0c6acecc":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"56366e5bf5444d8a88f257e138117441":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_view_name":"HTMLView","style":"IPY_MODEL_5fea4c5c7727490495fb11ef1e3e1bf0","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":"100%","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_b9652d2425c04e36824378a1319ee6a1"}},"a9fb7c15c16c433781052bae7cdd3aef":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_view_name":"ProgressView","style":"IPY_MODEL_5495fffcbf2d4b15ba845322a66963ef","_dom_classes":[],"description":"","_model_name":"FloatProgressModel","bar_style":"success","max":883,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":883,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_f2763b175be14c61859fb3da8e24d763"}},"0f23924f072e4b05952f94f095806552":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_view_name":"HTMLView","style":"IPY_MODEL_193f1fa3ce9f4e5fb671db8e867c4539","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 883/883 [01:31&lt;00:00,  8.45it/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_5bc0f704cf7b4ce9af5f2acfdcb54887"}},"5fea4c5c7727490495fb11ef1e3e1bf0":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"b9652d2425c04e36824378a1319ee6a1":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"5495fffcbf2d4b15ba845322a66963ef":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"f2763b175be14c61859fb3da8e24d763":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"193f1fa3ce9f4e5fb671db8e867c4539":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"5bc0f704cf7b4ce9af5f2acfdcb54887":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"7fc0753923dd402faa15820b13a74d59":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_c31aa147a91847eaa9cda6201b6f4bc8","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_bae5fd0fdfda44769cfafa99bc87f67e","IPY_MODEL_14e6176655d347d3a53a816503084c52","IPY_MODEL_ce58e6990df64710806de1148de84efc"]}},"c31aa147a91847eaa9cda6201b6f4bc8":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"bae5fd0fdfda44769cfafa99bc87f67e":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_view_name":"HTMLView","style":"IPY_MODEL_65f6af895b8842f789daef1385b1a6b4","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":"100%","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_96c281e36dd446ba85efd34d084bac46"}},"14e6176655d347d3a53a816503084c52":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_view_name":"ProgressView","style":"IPY_MODEL_df95597be86e4258a080c77c33c678a9","_dom_classes":[],"description":"","_model_name":"FloatProgressModel","bar_style":"success","max":18,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":18,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_830b410c31d74b969fe418f680e93b78"}},"ce58e6990df64710806de1148de84efc":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_view_name":"HTMLView","style":"IPY_MODEL_c35d5f0b88ed40a3bef273f3f6eb1ff7","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 18/18 [00:05&lt;00:00,  4.30it/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_1a662b4ed0c246939e6409d824d8c7e5"}},"65f6af895b8842f789daef1385b1a6b4":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"96c281e36dd446ba85efd34d084bac46":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"df95597be86e4258a080c77c33c678a9":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"830b410c31d74b969fe418f680e93b78":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"c35d5f0b88ed40a3bef273f3f6eb1ff7":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"1a662b4ed0c246939e6409d824d8c7e5":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}}}}},"cells":[{"cell_type":"markdown","source":["<table align=\"center\" width=100%>\n","    <tr>\n","        <td>\n","            <div align=\"center\">\n","                <font color=\"#21618C\" size=24px>\n","                    <b>Buildings vs Forest\n","                    </b>\n","                </font>\n","            </div>\n","        </td>\n","    </tr>\n","</table>"],"metadata":{"id":"tlmxXihh_278"}},{"cell_type":"markdown","source":["# Problem Statement:\n","This project aims to build a deep learning model that can classify images of buildings and forests."],"metadata":{"id":"k6IKYBgz_72r"}},{"cell_type":"markdown","source":["# 1.Import tensorflow"],"metadata":{"id":"gORPqavmc-7z"}},{"cell_type":"markdown","source":["Install stable version of tensorflow"],"metadata":{"id":"B5TaxXuWu4Ax"}},{"cell_type":"code","source":["!pip install tensorflow==2.0.0"],"metadata":{"id":"tm7ykgLwunfk","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1642344296860,"user_tz":-330,"elapsed":35387,"user":{"displayName":"Vasudeo Gaichor","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghx15AQmdm534ECVEuj8VJ_GFHe8VjTpmy2WcpoWg=s64","userId":"08113442855722338550"}},"outputId":"3273abf6-bad6-46c3-bc2b-d934acdae7de"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting tensorflow==2.0.0\n","  Downloading tensorflow-2.0.0-cp37-cp37m-manylinux2010_x86_64.whl (86.3 MB)\n","\u001b[K     |████████████████████████████████| 86.3 MB 54 kB/s \n","\u001b[?25hRequirement already satisfied: google-pasta>=0.1.6 in /usr/local/lib/python3.7/dist-packages (from tensorflow==2.0.0) (0.2.0)\n","Requirement already satisfied: absl-py>=0.7.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow==2.0.0) (0.12.0)\n","Requirement already satisfied: keras-preprocessing>=1.0.5 in /usr/local/lib/python3.7/dist-packages (from tensorflow==2.0.0) (1.1.2)\n","Requirement already satisfied: numpy<2.0,>=1.16.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow==2.0.0) (1.19.5)\n","Requirement already satisfied: opt-einsum>=2.3.2 in /usr/local/lib/python3.7/dist-packages (from tensorflow==2.0.0) (3.3.0)\n","Collecting gast==0.2.2\n","  Downloading gast-0.2.2.tar.gz (10 kB)\n","Requirement already satisfied: six>=1.10.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow==2.0.0) (1.15.0)\n","Requirement already satisfied: wrapt>=1.11.1 in /usr/local/lib/python3.7/dist-packages (from tensorflow==2.0.0) (1.13.3)\n","Requirement already satisfied: termcolor>=1.1.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow==2.0.0) (1.1.0)\n","Collecting tensorflow-estimator<2.1.0,>=2.0.0\n","  Downloading tensorflow_estimator-2.0.1-py2.py3-none-any.whl (449 kB)\n","\u001b[K     |████████████████████████████████| 449 kB 60.6 MB/s \n","\u001b[?25hRequirement already satisfied: wheel>=0.26 in /usr/local/lib/python3.7/dist-packages (from tensorflow==2.0.0) (0.37.1)\n","Requirement already satisfied: grpcio>=1.8.6 in /usr/local/lib/python3.7/dist-packages (from tensorflow==2.0.0) (1.43.0)\n","Requirement already satisfied: astor>=0.6.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow==2.0.0) (0.8.1)\n","Collecting keras-applications>=1.0.8\n","  Downloading Keras_Applications-1.0.8-py3-none-any.whl (50 kB)\n","\u001b[K     |████████████████████████████████| 50 kB 9.4 MB/s \n","\u001b[?25hRequirement already satisfied: protobuf>=3.6.1 in /usr/local/lib/python3.7/dist-packages (from tensorflow==2.0.0) (3.17.3)\n","Collecting tensorboard<2.1.0,>=2.0.0\n","  Downloading tensorboard-2.0.2-py3-none-any.whl (3.8 MB)\n","\u001b[K     |████████████████████████████████| 3.8 MB 70.8 MB/s \n","\u001b[?25hRequirement already satisfied: h5py in /usr/local/lib/python3.7/dist-packages (from keras-applications>=1.0.8->tensorflow==2.0.0) (3.1.0)\n","Requirement already satisfied: setuptools>=41.0.0 in /usr/local/lib/python3.7/dist-packages (from tensorboard<2.1.0,>=2.0.0->tensorflow==2.0.0) (57.4.0)\n","Requirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.7/dist-packages (from tensorboard<2.1.0,>=2.0.0->tensorflow==2.0.0) (3.3.6)\n","Requirement already satisfied: google-auth-oauthlib<0.5,>=0.4.1 in /usr/local/lib/python3.7/dist-packages (from tensorboard<2.1.0,>=2.0.0->tensorflow==2.0.0) (0.4.6)\n","Requirement already satisfied: requests<3,>=2.21.0 in /usr/local/lib/python3.7/dist-packages (from tensorboard<2.1.0,>=2.0.0->tensorflow==2.0.0) (2.23.0)\n","Requirement already satisfied: werkzeug>=0.11.15 in /usr/local/lib/python3.7/dist-packages (from tensorboard<2.1.0,>=2.0.0->tensorflow==2.0.0) (1.0.1)\n","Requirement already satisfied: google-auth<2,>=1.6.3 in /usr/local/lib/python3.7/dist-packages (from tensorboard<2.1.0,>=2.0.0->tensorflow==2.0.0) (1.35.0)\n","Requirement already satisfied: cachetools<5.0,>=2.0.0 in /usr/local/lib/python3.7/dist-packages (from google-auth<2,>=1.6.3->tensorboard<2.1.0,>=2.0.0->tensorflow==2.0.0) (4.2.4)\n","Requirement already satisfied: rsa<5,>=3.1.4 in /usr/local/lib/python3.7/dist-packages (from google-auth<2,>=1.6.3->tensorboard<2.1.0,>=2.0.0->tensorflow==2.0.0) (4.8)\n","Requirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.7/dist-packages (from google-auth<2,>=1.6.3->tensorboard<2.1.0,>=2.0.0->tensorflow==2.0.0) (0.2.8)\n","Requirement already satisfied: requests-oauthlib>=0.7.0 in /usr/local/lib/python3.7/dist-packages (from google-auth-oauthlib<0.5,>=0.4.1->tensorboard<2.1.0,>=2.0.0->tensorflow==2.0.0) (1.3.0)\n","Requirement already satisfied: importlib-metadata>=4.4 in /usr/local/lib/python3.7/dist-packages (from markdown>=2.6.8->tensorboard<2.1.0,>=2.0.0->tensorflow==2.0.0) (4.10.0)\n","Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.7/dist-packages (from importlib-metadata>=4.4->markdown>=2.6.8->tensorboard<2.1.0,>=2.0.0->tensorflow==2.0.0) (3.7.0)\n","Requirement already satisfied: typing-extensions>=3.6.4 in /usr/local/lib/python3.7/dist-packages (from importlib-metadata>=4.4->markdown>=2.6.8->tensorboard<2.1.0,>=2.0.0->tensorflow==2.0.0) (3.10.0.2)\n","Requirement already satisfied: pyasn1<0.5.0,>=0.4.6 in /usr/local/lib/python3.7/dist-packages (from pyasn1-modules>=0.2.1->google-auth<2,>=1.6.3->tensorboard<2.1.0,>=2.0.0->tensorflow==2.0.0) (0.4.8)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests<3,>=2.21.0->tensorboard<2.1.0,>=2.0.0->tensorflow==2.0.0) (3.0.4)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests<3,>=2.21.0->tensorboard<2.1.0,>=2.0.0->tensorflow==2.0.0) (1.24.3)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests<3,>=2.21.0->tensorboard<2.1.0,>=2.0.0->tensorflow==2.0.0) (2021.10.8)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests<3,>=2.21.0->tensorboard<2.1.0,>=2.0.0->tensorflow==2.0.0) (2.10)\n","Requirement already satisfied: oauthlib>=3.0.0 in /usr/local/lib/python3.7/dist-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib<0.5,>=0.4.1->tensorboard<2.1.0,>=2.0.0->tensorflow==2.0.0) (3.1.1)\n","Requirement already satisfied: cached-property in /usr/local/lib/python3.7/dist-packages (from h5py->keras-applications>=1.0.8->tensorflow==2.0.0) (1.5.2)\n","Building wheels for collected packages: gast\n","  Building wheel for gast (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for gast: filename=gast-0.2.2-py3-none-any.whl size=7554 sha256=86a24883d769e423eaac2b8a273945a58b7cbc8b10027be3b55b0272547d217d\n","  Stored in directory: /root/.cache/pip/wheels/21/7f/02/420f32a803f7d0967b48dd823da3f558c5166991bfd204eef3\n","Successfully built gast\n","Installing collected packages: tensorflow-estimator, tensorboard, keras-applications, gast, tensorflow\n","  Attempting uninstall: tensorflow-estimator\n","    Found existing installation: tensorflow-estimator 2.7.0\n","    Uninstalling tensorflow-estimator-2.7.0:\n","      Successfully uninstalled tensorflow-estimator-2.7.0\n","  Attempting uninstall: tensorboard\n","    Found existing installation: tensorboard 2.7.0\n","    Uninstalling tensorboard-2.7.0:\n","      Successfully uninstalled tensorboard-2.7.0\n","  Attempting uninstall: gast\n","    Found existing installation: gast 0.4.0\n","    Uninstalling gast-0.4.0:\n","      Successfully uninstalled gast-0.4.0\n","  Attempting uninstall: tensorflow\n","    Found existing installation: tensorflow 2.7.0\n","    Uninstalling tensorflow-2.7.0:\n","      Successfully uninstalled tensorflow-2.7.0\n","\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n","tensorflow-probability 0.15.0 requires gast>=0.3.2, but you have gast 0.2.2 which is incompatible.\u001b[0m\n","Successfully installed gast-0.2.2 keras-applications-1.0.8 tensorboard-2.0.2 tensorflow-2.0.0 tensorflow-estimator-2.0.1\n"]}]},{"cell_type":"code","source":["# check version of tensorflow\n","import tensorflow as tf\n","print(tf.__version__)"],"metadata":{"id":"Ydvqqr19rvH0","executionInfo":{"status":"ok","timestamp":1642344296861,"user_tz":-330,"elapsed":9,"user":{"displayName":"Vasudeo Gaichor","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghx15AQmdm534ECVEuj8VJ_GFHe8VjTpmy2WcpoWg=s64","userId":"08113442855722338550"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"915a5317-6b2c-46af-b230-4d8e82ab2e22"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["2.0.0\n"]}]},{"cell_type":"markdown","source":["Restart runtime"],"metadata":{"id":"plUEy19DvDa6"}},{"cell_type":"markdown","source":["# 2.Import Libraries"],"metadata":{"id":"wNoaGO6nBTjh"}},{"cell_type":"code","source":["# Import libraries and packages\n","import matplotlib as plt\n","%matplotlib inline\n","from tensorflow.keras.utils import to_categorical\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import confusion_matrix , accuracy_score, classification_report\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Dense, Dropout\n","from tensorflow.keras.optimizers import SGD\n","from imutils import paths\n","import matplotlib.pyplot as plt\n","import numpy as np\n","import random\n","import pickle\n","import cv2\n","import os\n","import time   # time1 = time.time(); print('Time taken: {:.1f} seconds'.format(time.time() - time1))\n","import warnings\n","from tqdm import tqdm_notebook as tqdm\n","import itertools\n","\n","warnings.filterwarnings(\"ignore\")\n","SEED = 42   # set random seed"],"metadata":{"id":"OcijyCILuqlL","executionInfo":{"status":"ok","timestamp":1642344297898,"user_tz":-330,"elapsed":1042,"user":{"displayName":"Vasudeo Gaichor","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghx15AQmdm534ECVEuj8VJ_GFHe8VjTpmy2WcpoWg=s64","userId":"08113442855722338550"}}},"execution_count":4,"outputs":[]},{"cell_type":"markdown","source":["# 3. Load the data"],"metadata":{"id":"qNHERC_5Bl4Q"}},{"cell_type":"markdown","source":["Mount the google drive"],"metadata":{"id":"k27IcXca7cWh"}},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BrdtlwrsBz1M","executionInfo":{"status":"ok","timestamp":1642344345170,"user_tz":-330,"elapsed":47276,"user":{"displayName":"Vasudeo Gaichor","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghx15AQmdm534ECVEuj8VJ_GFHe8VjTpmy2WcpoWg=s64","userId":"08113442855722338550"}},"outputId":"2167bd3b-eced-42bf-b7b8-777e175f3e48"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","source":["# Change the working directory\n","os.chdir('/content/drive/MyDrive/DL - Project 1 - ANN - Buildings vs Forests')"],"metadata":{"id":"aUvyGuQJzlWB","executionInfo":{"status":"ok","timestamp":1642344345171,"user_tz":-330,"elapsed":14,"user":{"displayName":"Vasudeo Gaichor","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghx15AQmdm534ECVEuj8VJ_GFHe8VjTpmy2WcpoWg=s64","userId":"08113442855722338550"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["!dir"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GU5ZLX7T7u2c","executionInfo":{"status":"ok","timestamp":1642344345171,"user_tz":-330,"elapsed":12,"user":{"displayName":"Vasudeo Gaichor","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghx15AQmdm534ECVEuj8VJ_GFHe8VjTpmy2WcpoWg=s64","userId":"08113442855722338550"}},"outputId":"f9561486-70a5-4b8c-81cf-4754fd2b1360"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["Class_Demo_ANN.ipynb  flagged\n","dataset\t\t      Image\\ Classification\\ with\\ ANN-Buildings\\ vs\\ Forest\n","dataset1\t      model_ANN.h5\n","dataset2\t      test_examples\n","dataset3\t      test_examples.rar\n","dataset.rar\n"]}]},{"cell_type":"code","source":["# unzip the dataset.rar file\n","!pip install patool"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"moDaByJw7v4A","executionInfo":{"status":"ok","timestamp":1642344348068,"user_tz":-330,"elapsed":2903,"user":{"displayName":"Vasudeo Gaichor","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghx15AQmdm534ECVEuj8VJ_GFHe8VjTpmy2WcpoWg=s64","userId":"08113442855722338550"}},"outputId":"adcc1558-5b3f-43d3-a524-a899bbf4cc7d"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting patool\n","  Downloading patool-1.12-py2.py3-none-any.whl (77 kB)\n","\u001b[?25l\r\u001b[K     |████▎                           | 10 kB 37.0 MB/s eta 0:00:01\r\u001b[K     |████████▌                       | 20 kB 43.8 MB/s eta 0:00:01\r\u001b[K     |████████████▊                   | 30 kB 45.8 MB/s eta 0:00:01\r\u001b[K     |█████████████████               | 40 kB 48.7 MB/s eta 0:00:01\r\u001b[K     |█████████████████████▏          | 51 kB 33.4 MB/s eta 0:00:01\r\u001b[K     |█████████████████████████▍      | 61 kB 36.3 MB/s eta 0:00:01\r\u001b[K     |█████████████████████████████▋  | 71 kB 24.5 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████████| 77 kB 6.9 MB/s \n","\u001b[?25hInstalling collected packages: patool\n","Successfully installed patool-1.12\n"]}]},{"cell_type":"code","source":["import patoolib\n","patoolib.extract_archive('dataset.rar')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":124},"id":"33fPgSDc8mYr","executionInfo":{"status":"ok","timestamp":1642344353556,"user_tz":-330,"elapsed":5496,"user":{"displayName":"Vasudeo Gaichor","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghx15AQmdm534ECVEuj8VJ_GFHe8VjTpmy2WcpoWg=s64","userId":"08113442855722338550"}},"outputId":"eb6cade8-72f7-4243-defb-9b1f5925ded4"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["patool: Extracting dataset.rar ...\n","patool: running /usr/bin/unrar x -- \"/content/drive/MyDrive/DL - Project 1 - ANN - Buildings vs Forests/dataset.rar\"\n","patool:     with cwd='./Unpack_j0ija7ir'\n","patool: ... dataset.rar extracted to `dataset4' (local file exists).\n"]},{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'dataset4'"]},"metadata":{},"execution_count":9}]},{"cell_type":"code","source":["# initialize the data and labels\n","print(\"[INFO] loading images...\")\n","time1 = time.time()   # to measure time taken\n","data = []\n","labels = []\n","\n","classes = [\"Forest\", \"Buildings\"]\n","\n","# grab the image paths and randomly shuffle them\n","imagePaths = sorted(list(paths.list_images('dataset')))   # data folder with 2 categorical folders\n","random.seed(SEED)\n","random.shuffle(imagePaths)\n","\n","# progress bar \n","with tqdm(total=len(imagePaths)) as pbar:\n","    \n","    # loop over the input images\n","    for imagePath in imagePaths:\n","        # load the image, resize the image to be 32x32 pixels (ignoring aspect ratio), \n","        # flatten the 32x32x3=3072 pixel image into a list, and store the image in the data list\n","        image = cv2.imread(imagePath)\n","        image = cv2.resize(image, (32, 32)).flatten()\n","        data.append(image)\n","\n","        # extract the class label from the image path and update the labels list\n","        label = imagePath.split(os.path.sep)[-2]\n","        \n","        label = 1 if label == \"Buildings\" else 0\n","        labels.append(label)\n","        \n","        # update the progressbar\n","        pbar.update(1)\n","\n","# scale the raw pixel intensities to the range [0, 1]\n","data = np.array(data, dtype=\"float\") / 255.0\n","labels = np.array(labels)\n","\n","print('Time taken: {:.1f} seconds'.format(time.time() - time1))   # to measure time taken\n","print(\"done\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":101,"referenced_widgets":["cbb076449c9c40da8c776d96c397ccaf","28fa2bfb61d743b1b402a6cd0c6acecc","56366e5bf5444d8a88f257e138117441","a9fb7c15c16c433781052bae7cdd3aef","0f23924f072e4b05952f94f095806552","5fea4c5c7727490495fb11ef1e3e1bf0","b9652d2425c04e36824378a1319ee6a1","5495fffcbf2d4b15ba845322a66963ef","f2763b175be14c61859fb3da8e24d763","193f1fa3ce9f4e5fb671db8e867c4539","5bc0f704cf7b4ce9af5f2acfdcb54887"]},"id":"N_EoClSLBZHt","executionInfo":{"status":"ok","timestamp":1642344446880,"user_tz":-330,"elapsed":93331,"user":{"displayName":"Vasudeo Gaichor","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghx15AQmdm534ECVEuj8VJ_GFHe8VjTpmy2WcpoWg=s64","userId":"08113442855722338550"}},"outputId":"379de82f-c7c4-4631-b906-a1b7c1d3ea9a"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["[INFO] loading images...\n"]},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"cbb076449c9c40da8c776d96c397ccaf","version_minor":0,"version_major":2},"text/plain":["  0%|          | 0/883 [00:00<?, ?it/s]"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Time taken: 93.5 seconds\n","done\n"]}]},{"cell_type":"code","source":["# check total images loaded\n","print(\"Total Images: \", len(data))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-iJEC-G-BrhD","executionInfo":{"status":"ok","timestamp":1642344446881,"user_tz":-330,"elapsed":44,"user":{"displayName":"Vasudeo Gaichor","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghx15AQmdm534ECVEuj8VJ_GFHe8VjTpmy2WcpoWg=s64","userId":"08113442855722338550"}},"outputId":"941fced9-031f-4500-e832-cc91943d7915"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["Total Images:  883\n"]}]},{"cell_type":"code","source":["# sample data for first image\n","print(\"sample image: {}\".format(data[0]))\n","print(\"no of features/pixels values: {}\".format(len(data[0]))) # 32x32x3=3072\n","print(\"label: {}\".format(classes[labels[0]]))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"on_QeMBbEDgT","executionInfo":{"status":"ok","timestamp":1642344446882,"user_tz":-330,"elapsed":41,"user":{"displayName":"Vasudeo Gaichor","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghx15AQmdm534ECVEuj8VJ_GFHe8VjTpmy2WcpoWg=s64","userId":"08113442855722338550"}},"outputId":"ec69a3a6-5a64-430a-d429-1ea182797978"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["sample image: [0.31764706 0.29803922 0.28627451 ... 0.74117647 0.58823529 0.4627451 ]\n","no of features/pixels values: 3072\n","label: Forest\n"]}]},{"cell_type":"markdown","source":["# 4. Data Partition"],"metadata":{"id":"msaMROtkF1cZ"}},{"cell_type":"code","source":["# partition the data into 80% training and 20% validation\n","(trainX, testX, trainY, testY) = train_test_split(data, labels, test_size=0.2, random_state=SEED)"],"metadata":{"id":"vw7Z-ol1EGa2","executionInfo":{"status":"ok","timestamp":1642344446882,"user_tz":-330,"elapsed":37,"user":{"displayName":"Vasudeo Gaichor","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghx15AQmdm534ECVEuj8VJ_GFHe8VjTpmy2WcpoWg=s64","userId":"08113442855722338550"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":["trainX.shape  "],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"S1yrhAytEdIO","executionInfo":{"status":"ok","timestamp":1642344446883,"user_tz":-330,"elapsed":38,"user":{"displayName":"Vasudeo Gaichor","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghx15AQmdm534ECVEuj8VJ_GFHe8VjTpmy2WcpoWg=s64","userId":"08113442855722338550"}},"outputId":"397e6538-9aa5-419c-e8e9-23f34181bda5"},"execution_count":14,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(706, 3072)"]},"metadata":{},"execution_count":14}]},{"cell_type":"code","source":["trainY.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"d_WL0xzjE7Ja","executionInfo":{"status":"ok","timestamp":1642344446884,"user_tz":-330,"elapsed":36,"user":{"displayName":"Vasudeo Gaichor","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghx15AQmdm534ECVEuj8VJ_GFHe8VjTpmy2WcpoWg=s64","userId":"08113442855722338550"}},"outputId":"f9066a26-4c2d-4616-d8b2-dcc73735bb30"},"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(706,)"]},"metadata":{},"execution_count":15}]},{"cell_type":"code","source":["testX.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Br72y5PoE9uj","executionInfo":{"status":"ok","timestamp":1642344446885,"user_tz":-330,"elapsed":34,"user":{"displayName":"Vasudeo Gaichor","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghx15AQmdm534ECVEuj8VJ_GFHe8VjTpmy2WcpoWg=s64","userId":"08113442855722338550"}},"outputId":"c80cc353-0a66-4040-f1dd-40776913ae61"},"execution_count":16,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(177, 3072)"]},"metadata":{},"execution_count":16}]},{"cell_type":"code","source":["testY.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"T3mW26ryE_uX","executionInfo":{"status":"ok","timestamp":1642344446885,"user_tz":-330,"elapsed":32,"user":{"displayName":"Vasudeo Gaichor","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghx15AQmdm534ECVEuj8VJ_GFHe8VjTpmy2WcpoWg=s64","userId":"08113442855722338550"}},"outputId":"27f71938-edb7-442c-87b8-02fe9d3eefbc"},"execution_count":17,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(177,)"]},"metadata":{},"execution_count":17}]},{"cell_type":"code","source":["# convert the labels from integers/categories to vectors \n","\n","trainY = to_categorical(trainY, num_classes=2)   # fit_transform = find all unique class labels + transform into one-hot encoded labels\n","testY = to_categorical(testY, num_classes=2)     # transform = perform the one-hot encoding (unique class labels already found)\n","\n","# [0,1] Buildings\n","# [1,0] Forest"],"metadata":{"id":"hZrOzuSXFLW1","executionInfo":{"status":"ok","timestamp":1642344446886,"user_tz":-330,"elapsed":30,"user":{"displayName":"Vasudeo Gaichor","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghx15AQmdm534ECVEuj8VJ_GFHe8VjTpmy2WcpoWg=s64","userId":"08113442855722338550"}}},"execution_count":18,"outputs":[]},{"cell_type":"code","source":["# check out a sample training image\n","sample_image = (trainX[5] * 255).astype(\"int\")"],"metadata":{"id":"pBduIvj2GSRM","executionInfo":{"status":"ok","timestamp":1642344446886,"user_tz":-330,"elapsed":30,"user":{"displayName":"Vasudeo Gaichor","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghx15AQmdm534ECVEuj8VJ_GFHe8VjTpmy2WcpoWg=s64","userId":"08113442855722338550"}}},"execution_count":19,"outputs":[]},{"cell_type":"code","source":["plt.imshow(sample_image.reshape(32,32,3))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":283},"id":"VzP63VDWGmxx","executionInfo":{"status":"ok","timestamp":1642344446886,"user_tz":-330,"elapsed":29,"user":{"displayName":"Vasudeo Gaichor","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghx15AQmdm534ECVEuj8VJ_GFHe8VjTpmy2WcpoWg=s64","userId":"08113442855722338550"}},"outputId":"6aaa6248-e8bc-4984-c5d5-32772f4e60cb"},"execution_count":20,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.image.AxesImage at 0x7f6176fe3490>"]},"metadata":{},"execution_count":20},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["trainY[5]   # [0,1] means buildings [1,0] means forest"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MRVm_ZIbGr-W","executionInfo":{"status":"ok","timestamp":1642344446887,"user_tz":-330,"elapsed":26,"user":{"displayName":"Vasudeo Gaichor","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghx15AQmdm534ECVEuj8VJ_GFHe8VjTpmy2WcpoWg=s64","userId":"08113442855722338550"}},"outputId":"24568677-d43d-4eb9-8777-8afa2b60a79d"},"execution_count":21,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0., 1.], dtype=float32)"]},"metadata":{},"execution_count":21}]},{"cell_type":"markdown","metadata":{"id":"NWaKJJQAH1hi"},"source":["# 5. Define the architecture for ANN MODEL"]},{"cell_type":"code","execution_count":22,"metadata":{"id":"sn6MdCz1H1hi","executionInfo":{"status":"ok","timestamp":1642344447272,"user_tz":-330,"elapsed":407,"user":{"displayName":"Vasudeo Gaichor","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghx15AQmdm534ECVEuj8VJ_GFHe8VjTpmy2WcpoWg=s64","userId":"08113442855722338550"}}},"outputs":[],"source":["# define the 3072-1024-512-1 architecture using Keras\n","\n","model = Sequential()   \n","\n","# input layer 3072 as there are 32x32x3=3072 pixels in a flattened input image\n","# first hidden layer has 2048 nodes\n","model.add(Dense(units= 2048, input_shape=(3072,), kernel_initializer = 'uniform', activation=\"relu\"))  \n","\n","# # dropout for second layer \n","# model.add(Dropout(0.4))\n","\n","# second hidden layer has 1024 nodes\n","model.add(Dense(units=1024, kernel_initializer='uniform', activation=\"relu\"))     \n","\n","# third hidden layer has 512 nodes\n","model.add(Dense(units=512, kernel_initializer='uniform', activation=\"relu\")) \n","\n","# fourth hidden layer has 256 nodes\n","model.add(Dense(units=256, kernel_initializer='uniform', activation=\"relu\"))\n","\n"," # output layer with number of possible class labels\n","model.add(Dense(units=2,kernel_initializer='uniform', activation=\"softmax\"))           "]},{"cell_type":"markdown","metadata":{"id":"QH_Z8uwLH1hj"},"source":["# 6. Compiling your tensorflow ANN model"]},{"cell_type":"code","execution_count":23,"metadata":{"id":"4RfbU0kQH1hj","outputId":"c88d7c3e-d3f2-44ef-b5b2-80e526671ad0","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1642344447273,"user_tz":-330,"elapsed":17,"user":{"displayName":"Vasudeo Gaichor","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghx15AQmdm534ECVEuj8VJ_GFHe8VjTpmy2WcpoWg=s64","userId":"08113442855722338550"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["[INFO] compiling network network...\n"]}],"source":["# initialize our initial learning rate and # of epochs to train for\n","INIT_LR = 0.01\n","EPOCHS = 100\n"," \n","# compile the model using SGD as our optimizer and categorical cross-entropy loss\n","# (you'll want to use binary_crossentropy for 2-class classification)\n","print(\"[INFO] compiling network network...\")\n","opt = SGD(lr=INIT_LR)   # Stochastic Gradient Descent (SGD) optimizer\n","model.compile(loss=\"binary_crossentropy\", optimizer=opt, metrics=[\"accuracy\"])"]},{"cell_type":"code","source":["# checking the summary of the model\n","model.summary()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UH10rfUSJ7Dn","executionInfo":{"status":"ok","timestamp":1642344447274,"user_tz":-330,"elapsed":11,"user":{"displayName":"Vasudeo Gaichor","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghx15AQmdm534ECVEuj8VJ_GFHe8VjTpmy2WcpoWg=s64","userId":"08113442855722338550"}},"outputId":"54fc1d5e-f699-4f18-a619-3fe1ccc8b55a"},"execution_count":24,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","dense (Dense)                (None, 2048)              6293504   \n","_________________________________________________________________\n","dense_1 (Dense)              (None, 1024)              2098176   \n","_________________________________________________________________\n","dense_2 (Dense)              (None, 512)               524800    \n","_________________________________________________________________\n","dense_3 (Dense)              (None, 256)               131328    \n","_________________________________________________________________\n","dense_4 (Dense)              (None, 2)                 514       \n","=================================================================\n","Total params: 9,048,322\n","Trainable params: 9,048,322\n","Non-trainable params: 0\n","_________________________________________________________________\n"]}]},{"cell_type":"markdown","metadata":{"id":"N2VDhQ7tH1hk"},"source":["# 7.Training model training data"]},{"cell_type":"code","source":["# train the neural network on training data set\n","# batch_size (32) controls the size of each group of data to pass through the network. \n","\n","time1 = time.time()   # to measure time taken\n","H = model.fit(trainX, trainY, validation_data=(testX, testY), epochs=EPOCHS, batch_size=32)\n","print('Time taken: {:.1f} seconds'.format(time.time() - time1))   # to measure time taken"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_4wRBd40Lekf","executionInfo":{"status":"ok","timestamp":1642344586025,"user_tz":-330,"elapsed":138758,"user":{"displayName":"Vasudeo Gaichor","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghx15AQmdm534ECVEuj8VJ_GFHe8VjTpmy2WcpoWg=s64","userId":"08113442855722338550"}},"outputId":"c64a0182-8fa4-4776-8155-76e089639ee2"},"execution_count":25,"outputs":[{"output_type":"stream","name":"stdout","text":["Train on 706 samples, validate on 177 samples\n","Epoch 1/100\n","706/706 [==============================] - 2s 3ms/sample - loss: 0.6601 - accuracy: 0.5482 - val_loss: 0.6542 - val_accuracy: 0.5367\n","Epoch 2/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.6312 - accuracy: 0.5567 - val_loss: 0.6369 - val_accuracy: 0.5537\n","Epoch 3/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.6153 - accuracy: 0.5680 - val_loss: 0.6222 - val_accuracy: 0.5367\n","Epoch 4/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.5934 - accuracy: 0.5921 - val_loss: 0.5818 - val_accuracy: 0.6723\n","Epoch 5/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.5629 - accuracy: 0.6813 - val_loss: 0.5531 - val_accuracy: 0.6554\n","Epoch 6/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.5312 - accuracy: 0.7507 - val_loss: 0.5716 - val_accuracy: 0.6215\n","Epoch 7/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.5031 - accuracy: 0.7578 - val_loss: 0.5577 - val_accuracy: 0.7345\n","Epoch 8/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.4675 - accuracy: 0.8130 - val_loss: 0.4746 - val_accuracy: 0.8192\n","Epoch 9/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.4317 - accuracy: 0.8286 - val_loss: 0.7697 - val_accuracy: 0.5480\n","Epoch 10/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.4276 - accuracy: 0.8300 - val_loss: 0.9765 - val_accuracy: 0.4972\n","Epoch 11/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.4268 - accuracy: 0.8371 - val_loss: 0.4456 - val_accuracy: 0.7910\n","Epoch 12/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.3915 - accuracy: 0.8371 - val_loss: 2.1427 - val_accuracy: 0.4633\n","Epoch 13/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.5412 - accuracy: 0.7904 - val_loss: 0.3838 - val_accuracy: 0.8362\n","Epoch 14/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.3611 - accuracy: 0.8683 - val_loss: 0.3883 - val_accuracy: 0.8475\n","Epoch 15/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.3375 - accuracy: 0.8739 - val_loss: 0.3478 - val_accuracy: 0.8531\n","Epoch 16/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.3297 - accuracy: 0.8711 - val_loss: 0.4679 - val_accuracy: 0.7684\n","Epoch 17/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.3100 - accuracy: 0.8697 - val_loss: 0.3500 - val_accuracy: 0.8531\n","Epoch 18/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.3092 - accuracy: 0.8711 - val_loss: 0.4776 - val_accuracy: 0.7740\n","Epoch 19/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.2889 - accuracy: 0.8895 - val_loss: 0.3664 - val_accuracy: 0.8644\n","Epoch 20/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.3006 - accuracy: 0.8739 - val_loss: 0.3399 - val_accuracy: 0.8531\n","Epoch 21/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.2650 - accuracy: 0.9037 - val_loss: 0.3848 - val_accuracy: 0.8136\n","Epoch 22/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.3275 - accuracy: 0.8612 - val_loss: 0.3155 - val_accuracy: 0.8644\n","Epoch 23/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.2851 - accuracy: 0.8924 - val_loss: 0.3673 - val_accuracy: 0.8249\n","Epoch 24/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.2402 - accuracy: 0.9150 - val_loss: 1.7882 - val_accuracy: 0.4633\n","Epoch 25/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.3372 - accuracy: 0.8768 - val_loss: 0.3081 - val_accuracy: 0.8757\n","Epoch 26/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.2430 - accuracy: 0.9150 - val_loss: 0.4061 - val_accuracy: 0.8305\n","Epoch 27/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.2075 - accuracy: 0.9306 - val_loss: 0.3331 - val_accuracy: 0.8531\n","Epoch 28/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.1733 - accuracy: 0.9533 - val_loss: 0.3546 - val_accuracy: 0.8362\n","Epoch 29/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.1770 - accuracy: 0.9476 - val_loss: 0.3969 - val_accuracy: 0.8362\n","Epoch 30/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.2712 - accuracy: 0.8924 - val_loss: 0.3171 - val_accuracy: 0.8644\n","Epoch 31/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.2151 - accuracy: 0.9235 - val_loss: 0.3060 - val_accuracy: 0.8701\n","Epoch 32/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.1503 - accuracy: 0.9589 - val_loss: 2.9342 - val_accuracy: 0.4746\n","Epoch 33/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.3174 - accuracy: 0.9122 - val_loss: 1.7482 - val_accuracy: 0.4746\n","Epoch 34/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.2607 - accuracy: 0.9178 - val_loss: 0.4051 - val_accuracy: 0.8305\n","Epoch 35/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.1452 - accuracy: 0.9589 - val_loss: 0.3435 - val_accuracy: 0.8418\n","Epoch 36/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.2718 - accuracy: 0.8980 - val_loss: 0.3135 - val_accuracy: 0.8701\n","Epoch 37/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.1257 - accuracy: 0.9660 - val_loss: 0.3287 - val_accuracy: 0.8475\n","Epoch 38/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.1348 - accuracy: 0.9674 - val_loss: 0.3193 - val_accuracy: 0.8531\n","Epoch 39/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.2660 - accuracy: 0.9136 - val_loss: 0.3028 - val_accuracy: 0.8531\n","Epoch 40/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.1053 - accuracy: 0.9816 - val_loss: 0.3328 - val_accuracy: 0.8588\n","Epoch 41/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.0948 - accuracy: 0.9788 - val_loss: 0.3149 - val_accuracy: 0.8588\n","Epoch 42/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.2505 - accuracy: 0.9207 - val_loss: 0.3487 - val_accuracy: 0.8531\n","Epoch 43/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.1468 - accuracy: 0.9533 - val_loss: 1.3907 - val_accuracy: 0.6497\n","Epoch 44/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.1740 - accuracy: 0.9547 - val_loss: 0.5575 - val_accuracy: 0.7797\n","Epoch 45/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.1403 - accuracy: 0.9504 - val_loss: 0.6949 - val_accuracy: 0.7571\n","Epoch 46/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.1722 - accuracy: 0.9448 - val_loss: 0.4708 - val_accuracy: 0.8079\n","Epoch 47/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.0874 - accuracy: 0.9745 - val_loss: 0.3242 - val_accuracy: 0.8701\n","Epoch 48/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.2198 - accuracy: 0.9348 - val_loss: 0.6892 - val_accuracy: 0.7684\n","Epoch 49/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.1017 - accuracy: 0.9717 - val_loss: 1.8683 - val_accuracy: 0.5198\n","Epoch 50/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.3148 - accuracy: 0.9207 - val_loss: 0.3219 - val_accuracy: 0.8475\n","Epoch 51/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.0775 - accuracy: 0.9858 - val_loss: 0.3126 - val_accuracy: 0.8644\n","Epoch 52/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.0729 - accuracy: 0.9858 - val_loss: 0.4069 - val_accuracy: 0.8531\n","Epoch 53/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.0567 - accuracy: 0.9901 - val_loss: 0.3582 - val_accuracy: 0.8531\n","Epoch 54/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.0472 - accuracy: 0.9915 - val_loss: 0.3304 - val_accuracy: 0.8644\n","Epoch 55/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.0431 - accuracy: 0.9943 - val_loss: 0.3469 - val_accuracy: 0.8588\n","Epoch 56/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.0371 - accuracy: 0.9943 - val_loss: 0.5376 - val_accuracy: 0.8249\n","Epoch 57/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.0385 - accuracy: 0.9915 - val_loss: 0.6073 - val_accuracy: 0.8079\n","Epoch 58/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.0457 - accuracy: 0.9901 - val_loss: 0.3622 - val_accuracy: 0.8644\n","Epoch 59/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.1562 - accuracy: 0.9462 - val_loss: 0.3614 - val_accuracy: 0.8588\n","Epoch 60/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.0291 - accuracy: 0.9972 - val_loss: 1.1726 - val_accuracy: 0.7175\n","Epoch 61/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.0910 - accuracy: 0.9802 - val_loss: 0.3660 - val_accuracy: 0.8757\n","Epoch 62/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.0293 - accuracy: 0.9972 - val_loss: 0.3631 - val_accuracy: 0.8588\n","Epoch 63/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.0228 - accuracy: 1.0000 - val_loss: 0.3996 - val_accuracy: 0.8531\n","Epoch 64/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.0206 - accuracy: 0.9986 - val_loss: 0.4685 - val_accuracy: 0.8588\n","Epoch 65/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.0567 - accuracy: 0.9816 - val_loss: 0.3962 - val_accuracy: 0.8588\n","Epoch 66/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.0167 - accuracy: 1.0000 - val_loss: 0.5199 - val_accuracy: 0.8192\n","Epoch 67/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.0224 - accuracy: 0.9958 - val_loss: 0.5103 - val_accuracy: 0.8644\n","Epoch 68/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.1192 - accuracy: 0.9745 - val_loss: 0.3722 - val_accuracy: 0.8588\n","Epoch 69/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.0171 - accuracy: 1.0000 - val_loss: 0.3789 - val_accuracy: 0.8644\n","Epoch 70/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.0148 - accuracy: 1.0000 - val_loss: 0.3840 - val_accuracy: 0.8644\n","Epoch 71/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.0132 - accuracy: 1.0000 - val_loss: 0.3937 - val_accuracy: 0.8588\n","Epoch 72/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.0119 - accuracy: 1.0000 - val_loss: 0.3961 - val_accuracy: 0.8588\n","Epoch 73/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.0106 - accuracy: 1.0000 - val_loss: 0.4052 - val_accuracy: 0.8757\n","Epoch 74/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.0103 - accuracy: 1.0000 - val_loss: 0.4767 - val_accuracy: 0.8701\n","Epoch 75/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.0108 - accuracy: 1.0000 - val_loss: 0.4108 - val_accuracy: 0.8644\n","Epoch 76/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.0086 - accuracy: 1.0000 - val_loss: 0.4302 - val_accuracy: 0.8531\n","Epoch 77/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.0080 - accuracy: 1.0000 - val_loss: 0.4176 - val_accuracy: 0.8588\n","Epoch 78/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.0076 - accuracy: 1.0000 - val_loss: 0.6219 - val_accuracy: 0.8475\n","Epoch 79/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.6002 - accuracy: 0.8980 - val_loss: 0.3201 - val_accuracy: 0.8588\n","Epoch 80/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.0302 - accuracy: 1.0000 - val_loss: 0.3391 - val_accuracy: 0.8588\n","Epoch 81/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.0513 - accuracy: 0.9830 - val_loss: 0.3514 - val_accuracy: 0.8475\n","Epoch 82/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.0210 - accuracy: 0.9972 - val_loss: 0.3676 - val_accuracy: 0.8588\n","Epoch 83/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.0145 - accuracy: 1.0000 - val_loss: 0.3736 - val_accuracy: 0.8644\n","Epoch 84/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.0118 - accuracy: 1.0000 - val_loss: 0.3969 - val_accuracy: 0.8588\n","Epoch 85/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.0107 - accuracy: 1.0000 - val_loss: 0.3946 - val_accuracy: 0.8644\n","Epoch 86/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.0095 - accuracy: 1.0000 - val_loss: 0.4185 - val_accuracy: 0.8418\n","Epoch 87/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.0084 - accuracy: 1.0000 - val_loss: 0.4020 - val_accuracy: 0.8644\n","Epoch 88/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.0080 - accuracy: 1.0000 - val_loss: 0.4113 - val_accuracy: 0.8644\n","Epoch 89/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.0073 - accuracy: 1.0000 - val_loss: 0.4698 - val_accuracy: 0.8475\n","Epoch 90/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.0069 - accuracy: 1.0000 - val_loss: 0.4179 - val_accuracy: 0.8644\n","Epoch 91/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.0063 - accuracy: 1.0000 - val_loss: 0.4264 - val_accuracy: 0.8644\n","Epoch 92/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.0058 - accuracy: 1.0000 - val_loss: 0.4346 - val_accuracy: 0.8588\n","Epoch 93/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.0055 - accuracy: 1.0000 - val_loss: 0.4916 - val_accuracy: 0.8475\n","Epoch 94/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.0055 - accuracy: 1.0000 - val_loss: 0.4333 - val_accuracy: 0.8588\n","Epoch 95/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.0050 - accuracy: 1.0000 - val_loss: 0.4408 - val_accuracy: 0.8644\n","Epoch 96/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.0048 - accuracy: 1.0000 - val_loss: 0.4487 - val_accuracy: 0.8588\n","Epoch 97/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.0046 - accuracy: 1.0000 - val_loss: 0.4496 - val_accuracy: 0.8588\n","Epoch 98/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.0045 - accuracy: 1.0000 - val_loss: 0.4463 - val_accuracy: 0.8588\n","Epoch 99/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.0042 - accuracy: 1.0000 - val_loss: 0.4560 - val_accuracy: 0.8644\n","Epoch 100/100\n","706/706 [==============================] - 1s 2ms/sample - loss: 0.0040 - accuracy: 1.0000 - val_loss: 0.4518 - val_accuracy: 0.8588\n","Time taken: 138.7 seconds\n"]}]},{"cell_type":"markdown","metadata":{"id":"LA1TugnpH1hl"},"source":["# 8.Evaluating the model on the test data "]},{"cell_type":"code","source":["# evaluate the network\n","print(\"[INFO] evaluating network...\")\n","pred_prob = model.predict(testX, batch_size=32)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9cADBranMlE0","executionInfo":{"status":"ok","timestamp":1642344586026,"user_tz":-330,"elapsed":13,"user":{"displayName":"Vasudeo Gaichor","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghx15AQmdm534ECVEuj8VJ_GFHe8VjTpmy2WcpoWg=s64","userId":"08113442855722338550"}},"outputId":"1f77b032-7678-4eb1-8db1-2e816c8b8d3f"},"execution_count":26,"outputs":[{"output_type":"stream","name":"stdout","text":["[INFO] evaluating network...\n"]}]},{"cell_type":"markdown","metadata":{"id":"a-gWgwFmH1ho"},"source":["### Convert testY and y_pred into 1's and 0 for classification report\n"]},{"cell_type":"code","execution_count":27,"metadata":{"id":"v7DmFQsjH1ho","executionInfo":{"status":"ok","timestamp":1642344586026,"user_tz":-330,"elapsed":5,"user":{"displayName":"Vasudeo Gaichor","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghx15AQmdm534ECVEuj8VJ_GFHe8VjTpmy2WcpoWg=s64","userId":"08113442855722338550"}}},"outputs":[],"source":["# Note: buildings -> 1 and forest -> 0"]},{"cell_type":"code","execution_count":28,"metadata":{"id":"1DBLMzCzH1ho","executionInfo":{"status":"ok","timestamp":1642344586027,"user_tz":-330,"elapsed":6,"user":{"displayName":"Vasudeo Gaichor","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghx15AQmdm534ECVEuj8VJ_GFHe8VjTpmy2WcpoWg=s64","userId":"08113442855722338550"}}},"outputs":[],"source":["test_y = [ np.argmax(i)  for i in testY]\n","pred_y = [ np.argmax(i)  for i in pred_prob]"]},{"cell_type":"code","execution_count":29,"metadata":{"id":"R2Az8TLkH1hp","executionInfo":{"status":"ok","timestamp":1642344586027,"user_tz":-330,"elapsed":6,"user":{"displayName":"Vasudeo Gaichor","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghx15AQmdm534ECVEuj8VJ_GFHe8VjTpmy2WcpoWg=s64","userId":"08113442855722338550"}}},"outputs":[],"source":["def plot_confusion_metrix(y_true, y_pred,classes,\n","                         normalize=False,\n","                         title='Confusion Matrix',\n","                         cmap=plt.cm.Blues):\n","    \"\"\"\n","    Objective\n","    ----------\n","    plot confussion matrix, classification report and accuracy score\n","    \n","    parameters\n","    ----------\n","    y_true : array-like of shape (n_samples,)\n","        Ground truth (correct) target values.\n","\n","    y_pred : array-like of shape (n_samples,)\n","        Estimated targets as returned by a classifier.\n","    \n","    classes : list\n","        List of labels to index the matrix\n","        \n","    title : title for matrix\n","    cmap : colormap for matrix \n","    \n","    returns \n","    ----------\n","   all accruacy matrix \n","    \"\"\"\n","    \n","    \n","    cm = confusion_matrix(y_true,y_pred)\n","    \n","    \n","    if normalize:\n","        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]\n","        print(\"Normalized Confusion Matrix\")\n","    else:\n","        print(\"Confusion Matrix, Without Normalisation\")\n","\n","    \n","    plt.imshow(cm, interpolation='nearest',cmap=cmap)\n","    plt.title(title)\n","    plt.colorbar()\n","    tick_marks = np.arange(len(classes))\n","    plt.xticks(tick_marks,classes,rotation=35)\n","    plt.yticks(tick_marks,classes)\n","    \n","    fmt = '.2f' if normalize else 'd'\n","    thresh = cm.max() /2.\n","    \n","    for i , j in itertools.product(range(cm.shape[0]), range(cm.shape[0])):\n","        plt.text(j, i, format(cm[i,j], fmt),\n","                 horizontalalignment='center',\n","                 color='white' if cm[i, j] > thresh else 'black')\n","    \n","    plt.ylabel('True label')\n","    plt.xlabel('Predicted label')\n","    # plt.tight_layout()\n","    \n","    plt.show()\n","    \n","    print(\"-----------------------------------------------------\")\n","    print('Classification report')\n","    print(classification_report(y_true,y_pred))\n","    \n","    print(\"-----------------------------------------------------\")\n","    acc= accuracy_score(y_true,y_pred)\n","    print(\"Accuracy of the model: \", acc)"]},{"cell_type":"code","execution_count":30,"metadata":{"id":"dyVfoLGNH1hp","outputId":"4fa5c6c8-3278-480a-aabd-510bbc502f19","scrolled":true,"colab":{"base_uri":"https://localhost:8080/","height":570},"executionInfo":{"status":"ok","timestamp":1642344586752,"user_tz":-330,"elapsed":730,"user":{"displayName":"Vasudeo Gaichor","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghx15AQmdm534ECVEuj8VJ_GFHe8VjTpmy2WcpoWg=s64","userId":"08113442855722338550"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Confusion Matrix, Without Normalisation\n"]},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 2 Axes>"]},"metadata":{"needs_background":"light"}},{"output_type":"stream","name":"stdout","text":["-----------------------------------------------------\n","Classification report\n","              precision    recall  f1-score   support\n","\n","           0       0.84      0.87      0.85        82\n","           1       0.88      0.85      0.87        95\n","\n","    accuracy                           0.86       177\n","   macro avg       0.86      0.86      0.86       177\n","weighted avg       0.86      0.86      0.86       177\n","\n","-----------------------------------------------------\n","Accuracy of the model:  0.8587570621468926\n"]}],"source":["# plot confusion matrix for the test data\n","plot_confusion_metrix(test_y, pred_y,classes=[\"Forest: 0\",\"Buildings: 1\"])"]},{"cell_type":"markdown","metadata":{"id":"GJqB_fgnH1hq"},"source":["# 9. Generate Plots for accuracy and val loss"]},{"cell_type":"code","execution_count":31,"metadata":{"id":"lZLMjjR9H1hq","outputId":"1e4f7497-2e6a-4b97-911b-ff6526c5a839","colab":{"base_uri":"https://localhost:8080/","height":517},"executionInfo":{"status":"ok","timestamp":1642344616393,"user_tz":-330,"elapsed":999,"user":{"displayName":"Vasudeo Gaichor","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghx15AQmdm534ECVEuj8VJ_GFHe8VjTpmy2WcpoWg=s64","userId":"08113442855722338550"}}},"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 720x576 with 1 Axes>"]},"metadata":{}}],"source":["\n","# plot the training and validation loss\n","N = np.arange(0, EPOCHS)\n","plt.style.use(\"ggplot\")\n","plt.figure(figsize = [10,8])\n","plt.plot(N, H.history[\"loss\"], label=\"train_loss\")\n","plt.plot(N, H.history[\"val_loss\"], label=\"val_loss\")\n","plt.title(\"ANN: Training & Validation Loss\")\n","plt.xlabel(\"Epoch #\", weight=\"bold\")\n","plt.ylabel(\"Loss\", weight=\"bold\")\n","plt.legend()\n","plt.show()"]},{"cell_type":"code","execution_count":32,"metadata":{"id":"5De4qVQ4H1hq","outputId":"a3435024-0a79-407f-e249-0c26b86c0df1","colab":{"base_uri":"https://localhost:8080/","height":517},"executionInfo":{"status":"ok","timestamp":1642344620588,"user_tz":-330,"elapsed":929,"user":{"displayName":"Vasudeo Gaichor","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghx15AQmdm534ECVEuj8VJ_GFHe8VjTpmy2WcpoWg=s64","userId":"08113442855722338550"}}},"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 720x576 with 1 Axes>"]},"metadata":{}}],"source":["# plot the training and validation accuracy\n","N = np.arange(0, EPOCHS)\n","plt.style.use(\"ggplot\")\n","plt.figure(figsize = [10,8])\n","plt.plot(N, H.history[\"accuracy\"], label=\"train_acc\")\n","plt.plot(N, H.history[\"val_accuracy\"], label=\"val_acc\")\n","plt.title(\"ANN: Training and Validation Accuracy\")\n","plt.xlabel(\"Epoch #\", weight=\"bold\")\n","plt.ylabel(\"Accuracy\", weight=\"bold\")\n","plt.legend()\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"KdGFIrlQH1hr"},"source":["### 10. Saving the trained model "]},{"cell_type":"code","execution_count":34,"metadata":{"id":"ywefocd8H1hs","outputId":"a146b0d5-ec34-45a7-e513-610356f7b212","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1642344655052,"user_tz":-330,"elapsed":644,"user":{"displayName":"Vasudeo Gaichor","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghx15AQmdm534ECVEuj8VJ_GFHe8VjTpmy2WcpoWg=s64","userId":"08113442855722338550"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","dense (Dense)                (None, 2048)              6293504   \n","_________________________________________________________________\n","dense_1 (Dense)              (None, 1024)              2098176   \n","_________________________________________________________________\n","dense_2 (Dense)              (None, 512)               524800    \n","_________________________________________________________________\n","dense_3 (Dense)              (None, 256)               131328    \n","_________________________________________________________________\n","dense_4 (Dense)              (None, 2)                 514       \n","=================================================================\n","Total params: 9,048,322\n","Trainable params: 9,048,322\n","Non-trainable params: 0\n","_________________________________________________________________\n"]}],"source":["model.summary()"]},{"cell_type":"code","execution_count":35,"metadata":{"id":"HBZCa0oJH1hs","outputId":"723ca5c5-b1f3-4b30-ec24-1da95051ed1d","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1642344657888,"user_tz":-330,"elapsed":631,"user":{"displayName":"Vasudeo Gaichor","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghx15AQmdm534ECVEuj8VJ_GFHe8VjTpmy2WcpoWg=s64","userId":"08113442855722338550"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["[INFO] serializing network and label binarizer...\n"]}],"source":["# save the model and label binarizer to disk\n","print(\"[INFO] serializing network and label binarizer...\")\n","model.save('model_ANN.h5')\n"]},{"cell_type":"markdown","metadata":{"id":"n6qjHck8H1ht"},"source":["### 11.Making predictions using our trained tensorflow model"]},{"cell_type":"code","execution_count":36,"metadata":{"id":"rXLgFC1yH1ht","executionInfo":{"status":"ok","timestamp":1642344678770,"user_tz":-330,"elapsed":624,"user":{"displayName":"Vasudeo Gaichor","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghx15AQmdm534ECVEuj8VJ_GFHe8VjTpmy2WcpoWg=s64","userId":"08113442855722338550"}}},"outputs":[],"source":["# import the necessary packages\n","from tensorflow.keras.models import load_model\n","import pickle\n","import cv2\n","import imutils\n","import matplotlib.pyplot as plt\n","%matplotlib inline"]},{"cell_type":"code","execution_count":37,"metadata":{"id":"S_twfMl7H1ht","executionInfo":{"status":"ok","timestamp":1642344679171,"user_tz":-330,"elapsed":2,"user":{"displayName":"Vasudeo Gaichor","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghx15AQmdm534ECVEuj8VJ_GFHe8VjTpmy2WcpoWg=s64","userId":"08113442855722338550"}}},"outputs":[],"source":["# # load the model \n","# print(\"[INFO] loading network and...\")\n","# model2 = load_model(\"model_ANN.h5\")"]},{"cell_type":"code","execution_count":38,"metadata":{"id":"vrCsgnI5H1hu","executionInfo":{"status":"ok","timestamp":1642344679627,"user_tz":-330,"elapsed":2,"user":{"displayName":"Vasudeo Gaichor","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghx15AQmdm534ECVEuj8VJ_GFHe8VjTpmy2WcpoWg=s64","userId":"08113442855722338550"}}},"outputs":[],"source":["def display_img(img):\n","    fig = plt.figure(figsize=(12,10))\n","    plt.grid(b=None)\n","    ax = fig.add_subplot(111)\n","    ax.imshow(img)"]},{"cell_type":"code","source":["patoolib.extract_archive('test_examples.rar')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":124},"id":"qyw7f7zavbBI","executionInfo":{"status":"ok","timestamp":1642344681451,"user_tz":-330,"elapsed":625,"user":{"displayName":"Vasudeo Gaichor","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghx15AQmdm534ECVEuj8VJ_GFHe8VjTpmy2WcpoWg=s64","userId":"08113442855722338550"}},"outputId":"f8ceae4c-c861-469f-e36e-eac518775d5e"},"execution_count":39,"outputs":[{"output_type":"stream","name":"stdout","text":["patool: Extracting test_examples.rar ...\n","patool: running /usr/bin/unrar x -- \"/content/drive/My Drive/DL - Project 1 - ANN - Buildings vs Forests/test_examples.rar\"\n","patool:     with cwd='./Unpack_owdblcuk'\n","patool: ... test_examples.rar extracted to `test_examples1' (local file exists).\n"]},{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'test_examples1'"]},"metadata":{},"execution_count":39}]},{"cell_type":"code","execution_count":40,"metadata":{"id":"Dt9L1h68H1hu","outputId":"94414619-7871-4eba-bb6d-a4628bc2ec91","scrolled":true,"colab":{"base_uri":"https://localhost:8080/","height":1000,"referenced_widgets":["7fc0753923dd402faa15820b13a74d59","c31aa147a91847eaa9cda6201b6f4bc8","bae5fd0fdfda44769cfafa99bc87f67e","14e6176655d347d3a53a816503084c52","ce58e6990df64710806de1148de84efc","65f6af895b8842f789daef1385b1a6b4","96c281e36dd446ba85efd34d084bac46","df95597be86e4258a080c77c33c678a9","830b410c31d74b969fe418f680e93b78","c35d5f0b88ed40a3bef273f3f6eb1ff7","1a662b4ed0c246939e6409d824d8c7e5"],"output_embedded_package_id":"1wx1Uk91eMuxtPKp5dLF9xsbIUHPsTh-k"},"executionInfo":{"status":"ok","timestamp":1642344701471,"user_tz":-330,"elapsed":19523,"user":{"displayName":"Vasudeo Gaichor","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghx15AQmdm534ECVEuj8VJ_GFHe8VjTpmy2WcpoWg=s64","userId":"08113442855722338550"}}},"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}],"source":["# load the input image and resize it to the target spatial dimensions\n","width = 32\n","height = 32\n","\n","# grab the image paths and randomly shuffle them\n","testImagePaths = sorted(list(paths.list_images('test_examples')))   # test data folder with random images\n","\n","\n","# progress bar \n","with tqdm(total=len(testImagePaths)) as pbar:\n","    \n","    for imagePath in testImagePaths:\n","        image = cv2.imread(imagePath)\n","        output = image.copy()\n","        image = cv2.resize(image, (width, height))\n","\n","        # scale the pixel values to [0, 1]\n","        image = image.astype(\"float\") / 255.0\n","\n","        # for a simple fully-connected network, flatten the image\n","        image = image.flatten()\n","        image = image.reshape((1, image.shape[0]))\n","\n","\n","        # make a prediction on the image\n","        preds = model.predict(image)\n","\n","        # find the class label index with the largest corresponding probability\n","        i = preds.argmax(axis=1)[0]\n","        label = classes[i]\n","        \n","        label = \"{}: {:.2f}%\".format(label, preds[0][i] * 100)\n","\n","        \n","        output = imutils.resize(output, width=400)\n","        cv2.putText(output, label, (10, 25),  cv2.FONT_HERSHEY_SIMPLEX,\n","            0.7, (0, 255, 0), 2)\n","        \n","        # convert img to rgb format and display in noteboo\n","        img = cv2.cvtColor(output, cv2.COLOR_BGR2RGB)\n","        display_img(img)\n","\n","#         print(\"############################\")\n","#         print(\"image: {}\".format(os.path.split(imagePath)[-1]))\n","#         print(\"predicted label: {}\".format(label))\n","#         print(\"Confidence: {}\".format(preds[0][i]))\n","        \n","        pbar.update(1)"]},{"cell_type":"markdown","metadata":{"id":"DAyLD_WRH1hv"},"source":["## 11. Deployment using gradio"]},{"cell_type":"code","execution_count":41,"metadata":{"id":"ML2hzEuwH1hw","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1642344804269,"user_tz":-330,"elapsed":7941,"user":{"displayName":"Vasudeo Gaichor","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghx15AQmdm534ECVEuj8VJ_GFHe8VjTpmy2WcpoWg=s64","userId":"08113442855722338550"}},"outputId":"38d4ec4e-ce26-43d1-ab82-5596dac50915"},"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting gradio\n","  Downloading gradio-2.7.0-py3-none-any.whl (865 kB)\n","\u001b[?25l\r\u001b[K     |▍                               | 10 kB 31.4 MB/s eta 0:00:01\r\u001b[K     |▊                               | 20 kB 36.6 MB/s eta 0:00:01\r\u001b[K     |█▏                              | 30 kB 42.0 MB/s eta 0:00:01\r\u001b[K     |█▌                              | 40 kB 27.3 MB/s eta 0:00:01\r\u001b[K     |██                              | 51 kB 28.7 MB/s eta 0:00:01\r\u001b[K     |██▎                             | 61 kB 23.4 MB/s eta 0:00:01\r\u001b[K     |██▋                             | 71 kB 21.5 MB/s eta 0:00:01\r\u001b[K     |███                             | 81 kB 23.4 MB/s eta 0:00:01\r\u001b[K     |███▍                            | 92 kB 25.4 MB/s eta 0:00:01\r\u001b[K     |███▉                            | 102 kB 24.0 MB/s eta 0:00:01\r\u001b[K     |████▏                           | 112 kB 24.0 MB/s eta 0:00:01\r\u001b[K     |████▌                           | 122 kB 24.0 MB/s eta 0:00:01\r\u001b[K     |█████                           | 133 kB 24.0 MB/s eta 0:00:01\r\u001b[K     |█████▎                          | 143 kB 24.0 MB/s eta 0:00:01\r\u001b[K     |█████▊                          | 153 kB 24.0 MB/s eta 0:00:01\r\u001b[K     |██████                          | 163 kB 24.0 MB/s eta 0:00:01\r\u001b[K     |██████▍                         | 174 kB 24.0 MB/s eta 0:00:01\r\u001b[K     |██████▉                         | 184 kB 24.0 MB/s eta 0:00:01\r\u001b[K     |███████▏                        | 194 kB 24.0 MB/s eta 0:00:01\r\u001b[K     |███████▋                        | 204 kB 24.0 MB/s eta 0:00:01\r\u001b[K     |████████                        | 215 kB 24.0 MB/s eta 0:00:01\r\u001b[K     |████████▎                       | 225 kB 24.0 MB/s eta 0:00:01\r\u001b[K     |████████▊                       | 235 kB 24.0 MB/s eta 0:00:01\r\u001b[K     |█████████                       | 245 kB 24.0 MB/s eta 0:00:01\r\u001b[K     |█████████▌                      | 256 kB 24.0 MB/s eta 0:00:01\r\u001b[K     |█████████▉                      | 266 kB 24.0 MB/s eta 0:00:01\r\u001b[K     |██████████▏                     | 276 kB 24.0 MB/s eta 0:00:01\r\u001b[K     |██████████▋                     | 286 kB 24.0 MB/s eta 0:00:01\r\u001b[K     |███████████                     | 296 kB 24.0 MB/s eta 0:00:01\r\u001b[K     |███████████▍                    | 307 kB 24.0 MB/s eta 0:00:01\r\u001b[K     |███████████▊                    | 317 kB 24.0 MB/s eta 0:00:01\r\u001b[K     |████████████▏                   | 327 kB 24.0 MB/s eta 0:00:01\r\u001b[K     |████████████▌                   | 337 kB 24.0 MB/s eta 0:00:01\r\u001b[K     |████████████▉                   | 348 kB 24.0 MB/s eta 0:00:01\r\u001b[K     |█████████████▎                  | 358 kB 24.0 MB/s eta 0:00:01\r\u001b[K     |█████████████▋                  | 368 kB 24.0 MB/s eta 0:00:01\r\u001b[K     |██████████████                  | 378 kB 24.0 MB/s eta 0:00:01\r\u001b[K     |██████████████▍                 | 389 kB 24.0 MB/s eta 0:00:01\r\u001b[K     |██████████████▊                 | 399 kB 24.0 MB/s eta 0:00:01\r\u001b[K     |███████████████▏                | 409 kB 24.0 MB/s eta 0:00:01\r\u001b[K     |███████████████▌                | 419 kB 24.0 MB/s eta 0:00:01\r\u001b[K     |████████████████                | 430 kB 24.0 MB/s eta 0:00:01\r\u001b[K     |████████████████▎               | 440 kB 24.0 MB/s eta 0:00:01\r\u001b[K     |████████████████▋               | 450 kB 24.0 MB/s eta 0:00:01\r\u001b[K     |█████████████████               | 460 kB 24.0 MB/s eta 0:00:01\r\u001b[K     |█████████████████▍              | 471 kB 24.0 MB/s eta 0:00:01\r\u001b[K     |█████████████████▉              | 481 kB 24.0 MB/s eta 0:00:01\r\u001b[K     |██████████████████▏             | 491 kB 24.0 MB/s eta 0:00:01\r\u001b[K     |██████████████████▌             | 501 kB 24.0 MB/s eta 0:00:01\r\u001b[K     |███████████████████             | 512 kB 24.0 MB/s eta 0:00:01\r\u001b[K     |███████████████████▎            | 522 kB 24.0 MB/s eta 0:00:01\r\u001b[K     |███████████████████▊            | 532 kB 24.0 MB/s eta 0:00:01\r\u001b[K     |████████████████████            | 542 kB 24.0 MB/s eta 0:00:01\r\u001b[K     |████████████████████▍           | 552 kB 24.0 MB/s eta 0:00:01\r\u001b[K     |████████████████████▉           | 563 kB 24.0 MB/s eta 0:00:01\r\u001b[K     |█████████████████████▏          | 573 kB 24.0 MB/s eta 0:00:01\r\u001b[K     |█████████████████████▋          | 583 kB 24.0 MB/s eta 0:00:01\r\u001b[K     |██████████████████████          | 593 kB 24.0 MB/s eta 0:00:01\r\u001b[K     |██████████████████████▎         | 604 kB 24.0 MB/s eta 0:00:01\r\u001b[K     |██████████████████████▊         | 614 kB 24.0 MB/s eta 0:00:01\r\u001b[K     |███████████████████████         | 624 kB 24.0 MB/s eta 0:00:01\r\u001b[K     |███████████████████████▌        | 634 kB 24.0 MB/s eta 0:00:01\r\u001b[K     |███████████████████████▉        | 645 kB 24.0 MB/s eta 0:00:01\r\u001b[K     |████████████████████████▎       | 655 kB 24.0 MB/s eta 0:00:01\r\u001b[K     |████████████████████████▋       | 665 kB 24.0 MB/s eta 0:00:01\r\u001b[K     |█████████████████████████       | 675 kB 24.0 MB/s eta 0:00:01\r\u001b[K     |█████████████████████████▍      | 686 kB 24.0 MB/s eta 0:00:01\r\u001b[K     |█████████████████████████▊      | 696 kB 24.0 MB/s eta 0:00:01\r\u001b[K     |██████████████████████████▏     | 706 kB 24.0 MB/s eta 0:00:01\r\u001b[K     |██████████████████████████▌     | 716 kB 24.0 MB/s eta 0:00:01\r\u001b[K     |██████████████████████████▉     | 727 kB 24.0 MB/s eta 0:00:01\r\u001b[K     |███████████████████████████▎    | 737 kB 24.0 MB/s eta 0:00:01\r\u001b[K     |███████████████████████████▋    | 747 kB 24.0 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████    | 757 kB 24.0 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████▍   | 768 kB 24.0 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████▊   | 778 kB 24.0 MB/s eta 0:00:01\r\u001b[K     |█████████████████████████████▏  | 788 kB 24.0 MB/s eta 0:00:01\r\u001b[K     |█████████████████████████████▌  | 798 kB 24.0 MB/s eta 0:00:01\r\u001b[K     |██████████████████████████████  | 808 kB 24.0 MB/s eta 0:00:01\r\u001b[K     |██████████████████████████████▎ | 819 kB 24.0 MB/s eta 0:00:01\r\u001b[K     |██████████████████████████████▋ | 829 kB 24.0 MB/s eta 0:00:01\r\u001b[K     |███████████████████████████████ | 839 kB 24.0 MB/s eta 0:00:01\r\u001b[K     |███████████████████████████████▍| 849 kB 24.0 MB/s eta 0:00:01\r\u001b[K     |███████████████████████████████▉| 860 kB 24.0 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████████| 865 kB 24.0 MB/s \n","\u001b[?25hCollecting ffmpy\n","  Downloading ffmpy-0.3.0.tar.gz (4.8 kB)\n","Collecting pycryptodome\n","  Downloading pycryptodome-3.12.0-cp35-abi3-manylinux2010_x86_64.whl (2.0 MB)\n","\u001b[K     |████████████████████████████████| 2.0 MB 56.9 MB/s \n","\u001b[?25hCollecting Flask-Login\n","  Downloading Flask_Login-0.5.0-py2.py3-none-any.whl (16 kB)\n","Collecting Flask-Cors>=3.0.8\n","  Downloading Flask_Cors-3.0.10-py2.py3-none-any.whl (14 kB)\n","Requirement already satisfied: matplotlib in /usr/local/lib/python3.7/dist-packages (from gradio) (3.2.2)\n","Collecting flask-cachebuster\n","  Downloading Flask-CacheBuster-1.0.0.tar.gz (3.1 kB)\n","Collecting pydub\n","  Downloading pydub-0.25.1-py2.py3-none-any.whl (32 kB)\n","Collecting analytics-python\n","  Downloading analytics_python-1.4.0-py2.py3-none-any.whl (15 kB)\n","Collecting markdown2\n","  Downloading markdown2-2.4.2-py2.py3-none-any.whl (34 kB)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (from gradio) (1.19.5)\n","Requirement already satisfied: pandas in /usr/local/lib/python3.7/dist-packages (from gradio) (1.1.5)\n","Collecting paramiko\n","  Downloading paramiko-2.9.2-py2.py3-none-any.whl (210 kB)\n","\u001b[K     |████████████████████████████████| 210 kB 69.5 MB/s \n","\u001b[?25hRequirement already satisfied: requests in /usr/local/lib/python3.7/dist-packages (from gradio) (2.23.0)\n","Requirement already satisfied: pillow in /usr/local/lib/python3.7/dist-packages (from gradio) (7.1.2)\n","Requirement already satisfied: Flask>=1.1.1 in /usr/local/lib/python3.7/dist-packages (from gradio) (1.1.4)\n","Requirement already satisfied: click<8.0,>=5.1 in /usr/local/lib/python3.7/dist-packages (from Flask>=1.1.1->gradio) (7.1.2)\n","Requirement already satisfied: itsdangerous<2.0,>=0.24 in /usr/local/lib/python3.7/dist-packages (from Flask>=1.1.1->gradio) (1.1.0)\n","Requirement already satisfied: Jinja2<3.0,>=2.10.1 in /usr/local/lib/python3.7/dist-packages (from Flask>=1.1.1->gradio) (2.11.3)\n","Requirement already satisfied: Werkzeug<2.0,>=0.15 in /usr/local/lib/python3.7/dist-packages (from Flask>=1.1.1->gradio) (1.0.1)\n","Requirement already satisfied: Six in /usr/local/lib/python3.7/dist-packages (from Flask-Cors>=3.0.8->gradio) (1.15.0)\n","Requirement already satisfied: MarkupSafe>=0.23 in /usr/local/lib/python3.7/dist-packages (from Jinja2<3.0,>=2.10.1->Flask>=1.1.1->gradio) (2.0.1)\n","Collecting monotonic>=1.5\n","  Downloading monotonic-1.6-py2.py3-none-any.whl (8.2 kB)\n","Collecting backoff==1.10.0\n","  Downloading backoff-1.10.0-py2.py3-none-any.whl (31 kB)\n","Requirement already satisfied: python-dateutil>2.1 in /usr/local/lib/python3.7/dist-packages (from analytics-python->gradio) (2.8.2)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests->gradio) (2.10)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests->gradio) (2021.10.8)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests->gradio) (1.24.3)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests->gradio) (3.0.4)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.7/dist-packages (from matplotlib->gradio) (0.11.0)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib->gradio) (1.3.2)\n","Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib->gradio) (3.0.6)\n","Requirement already satisfied: pytz>=2017.2 in /usr/local/lib/python3.7/dist-packages (from pandas->gradio) (2018.9)\n","Collecting bcrypt>=3.1.3\n","  Downloading bcrypt-3.2.0-cp36-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.manylinux_2_24_x86_64.whl (61 kB)\n","\u001b[K     |████████████████████████████████| 61 kB 562 kB/s \n","\u001b[?25hCollecting cryptography>=2.5\n","  Downloading cryptography-36.0.1-cp36-abi3-manylinux_2_24_x86_64.whl (3.6 MB)\n","\u001b[K     |████████████████████████████████| 3.6 MB 67.7 MB/s \n","\u001b[?25hCollecting pynacl>=1.0.1\n","  Downloading PyNaCl-1.5.0-cp36-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.manylinux_2_24_x86_64.whl (856 kB)\n","\u001b[K     |████████████████████████████████| 856 kB 57.4 MB/s \n","\u001b[?25hRequirement already satisfied: cffi>=1.1 in /usr/local/lib/python3.7/dist-packages (from bcrypt>=3.1.3->paramiko->gradio) (1.15.0)\n","Requirement already satisfied: pycparser in /usr/local/lib/python3.7/dist-packages (from cffi>=1.1->bcrypt>=3.1.3->paramiko->gradio) (2.21)\n","Building wheels for collected packages: ffmpy, flask-cachebuster\n","  Building wheel for ffmpy (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for ffmpy: filename=ffmpy-0.3.0-py3-none-any.whl size=4712 sha256=6891b671a8fbe04e343cbfef95ad85a653172f2e5f6dd75417362789050e1c1e\n","  Stored in directory: /root/.cache/pip/wheels/13/e4/6c/e8059816e86796a597c6e6b0d4c880630f51a1fcfa0befd5e6\n","  Building wheel for flask-cachebuster (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for flask-cachebuster: filename=Flask_CacheBuster-1.0.0-py3-none-any.whl size=3373 sha256=974db332ccfcda387e8e6e94e187b79f121dd115ff6b93893c8502bbfac974e2\n","  Stored in directory: /root/.cache/pip/wheels/28/c0/c4/44687421dab41455be93112bd1b0dee1f3c5a9aa27bee63708\n","Successfully built ffmpy flask-cachebuster\n","Installing collected packages: pynacl, monotonic, cryptography, bcrypt, backoff, pydub, pycryptodome, paramiko, markdown2, Flask-Login, Flask-Cors, flask-cachebuster, ffmpy, analytics-python, gradio\n","Successfully installed Flask-Cors-3.0.10 Flask-Login-0.5.0 analytics-python-1.4.0 backoff-1.10.0 bcrypt-3.2.0 cryptography-36.0.1 ffmpy-0.3.0 flask-cachebuster-1.0.0 gradio-2.7.0 markdown2-2.4.2 monotonic-1.6 paramiko-2.9.2 pycryptodome-3.12.0 pydub-0.25.1 pynacl-1.5.0\n"]}],"source":["!pip install gradio"]},{"cell_type":"code","execution_count":42,"metadata":{"id":"kArJAiWyH1hw","executionInfo":{"status":"ok","timestamp":1642344805396,"user_tz":-330,"elapsed":1131,"user":{"displayName":"Vasudeo Gaichor","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghx15AQmdm534ECVEuj8VJ_GFHe8VjTpmy2WcpoWg=s64","userId":"08113442855722338550"}}},"outputs":[],"source":["import gradio as gr"]},{"cell_type":"code","execution_count":43,"metadata":{"id":"hdQAzpp_H1hw","outputId":"bd0ad7e8-7749-41ff-a814-6f98bf06ae97","colab":{"base_uri":"https://localhost:8080/","height":662},"executionInfo":{"status":"ok","timestamp":1642344808719,"user_tz":-330,"elapsed":3328,"user":{"displayName":"Vasudeo Gaichor","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghx15AQmdm534ECVEuj8VJ_GFHe8VjTpmy2WcpoWg=s64","userId":"08113442855722338550"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Colab notebook detected. To show errors in colab notebook, set `debug=True` in `launch()`\n","Running on public URL: https://49667.gradio.app\n","\n","This share link expires in 72 hours. For free permanent hosting, check out Spaces (https://huggingface.co/spaces)\n"]},{"output_type":"display_data","data":{"text/html":["\n","        <iframe\n","            width=\"900\"\n","            height=\"500\"\n","            src=\"https://49667.gradio.app\"\n","            frameborder=\"0\"\n","            allowfullscreen\n","        ></iframe>\n","        "],"text/plain":["<IPython.lib.display.IFrame at 0x7f616784fc90>"]},"metadata":{}},{"output_type":"execute_result","data":{"text/plain":["(<Flask 'gradio.networking'>,\n"," 'http://127.0.0.1:7860/',\n"," 'https://49667.gradio.app')"]},"metadata":{},"execution_count":43}],"source":["def predict_image(image):\n","    \n","    image = cv2.resize(image, (32, 32))\n","\n","    # scale the pixel values to [0, 1]\n","    image = image.astype(\"float\") / 255.0\n","\n","    # for a simple fully-connected network, flatten the image\n","    image = image.flatten()\n","    image = image.reshape((1, image.shape[0]))\n","\n","    # make a prediction on the image\n","    preds = model.predict(image).flatten()\n","    result = dict()\n","    result[\"Forest\"] = round(float(list(preds)[0]), 3)\n","    result[\"Buildings\"] = round(float(list(preds)[1]), 3)\n","    print(result)\n","    \n","    return result\n","\n","im = gr.inputs.Image(shape=(32,32))\n","label = gr.outputs.Label(num_top_classes=2)\n","\n","gr.Interface(fn=predict_image, inputs=im, outputs=label, capture_session=True, title=\"ANN Demo\").launch(share=True)"]},{"cell_type":"markdown","source":["# 12. CONCLUSIONS:"],"metadata":{"id":"wtm3jcpNcnu_"}},{"cell_type":"markdown","source":["#### The ANN model gives 86% accuracy and gives good results. But the plots of accuracy and loss for training and validation show a gap between accuracy and loss for training and validation data, which is a clear indication of overfitting. Hence, we need to approach the problem using a different neural network architecture like CNN which is mostly used for image recognition problems instead of ANN which is used mostly for tabular data and text data."],"metadata":{"id":"lNxVIZjDeLrP"}}]}